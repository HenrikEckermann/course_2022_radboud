[["index.html", "Multi-omic data science with R/Bioconductor Welcome to Oulu Summer School, June 2022 1 Overview 1.1 Contents and learning goals 1.2 Schedule and organizers 1.3 How to apply 1.4 Acknowledgments", " Multi-omic data science with R/Bioconductor Welcome to Oulu Summer School, June 2022 2022-04-24 1 Overview 1.1 Contents and learning goals This course will teach the basics of biomedical data analysis with R/Bioconductor, a popular open source environment for scientific data analysis. The participants get an overview of the reproducible data analysis workflow in modern multi-omics, with a focus on recent examples from published microbiome studies. After the course you will know how to approach new tasks in biomedical data analysis by utilizing available documentation and R tools. The teaching will follow open online documentation created by the course teachers, extending the online book Orchestrating Microbiome Analysis (https://microbiome.github.io/OMA). The openly licensed teaching material will be available online during and after the course, following national recommendations on open education. The training material walks you through the standard steps of biomedical data analysis covering data access, exploration, analysis, visualization, reproducible reporting, and best practices in open science. We will teach generic data analytical skills that are applicable to common data analysis tasks encountered in modern omics research. The teaching format allows adaptations according to the student’s learning speed. 1.2 Schedule and organizers The course will be organized in a live format. Venue University of Oulu. June 20-23, 2022. Schedule Contact teaching daily between 9am – 5pm, including lectures, demonstrations, hands-on sessions, and breaks. A detailed schedule is available at the course website: (https://microbiome.github.io/course_2022_oulu). Teachers and organizers Leo Lahti is the main teacher and Associate Professor in Data Science at the University of Turku, with specialization on biomedical data analysis. Course assistant Tuomas Borman (University of Turku) is one of the main developers of the open training material covered by the course. Course coordinator Jenni Hekkala is PhD researcher at the University of Oulu. The course is jointly organized by Health and Biosciences Doctoral Programme, University of Oulu Graduate School Department of Computing, University of Turku, Finland Finnish IT Center for Science (CSC) supports the course with cloud computing services 1.3 How to apply Target audience The course is primarily designed for advanced MSc and PhD students, Postdocs, and biomedical researchers who wish to learn and develop new skills in scientific programming and biomedical data analysis. Academic students and researchers from Finland and abroad are welcome and encouraged to apply. The course has limited capacity of max 20 participants, and priority will given for local students from Oulu. Expected background Some earlier experience with R or another programming language is recommended. However, this can be compensated by familiarizing with the course material in advance, if necessary. The teaching format allows adaptations according to the student’s learning speed. Application Send a brief motivation letter to Jenni Hekkala first.last@oulu.fi Applications sent before May 20 will be given priority Course fee The course fee covers contact teaching and teaching material. 285 euros with registration by May 20, 2022 350 euros with registration after May 20, 2022 Local students are exempted from the fee Accommodation Accommodation and travel costs are not included in the registration fee Links to how to reserve accommodation 1.4 Acknowledgments Citation We thank all developers and contributors who have contributed open resources that supported the development of the training material. Kindly cite the course material as Borman and Lahti (2022) Contact See https://microbiome.github.io License and source code All material is released under the open CC BY-NC-SA 3.0 License and available online during and after the course, following the recommendations on open teaching materials of the national open science coordination in Finland**. The source code of this repository is reproducible and contains the Rmd files with executable code. All files can be rendered at one go by running the file main.R. You can check the file for details on how to clone the repository and convert it into a gitbook, although this is not necessary for the training. Source code (github): miaverse teaching material Course page (html): miaverse teaching material References "],["program.html", "2 Program 2.1 Overview 2.2 Day 1 - Open data science 2.3 Day 2 - Univariate methods 2.4 Day 3 - Multivariate methods 2.5 Day 4 - Multi-table methods", " 2 Program The course takes place daily from 9am – 5pm (CEST), including coffee and lunch breaks. We expect that participants will prepare for the course in advance, see section 3. Online support is available. 2.1 Overview The course is based on miaverse (mia = MIcrobiome Analysis), an R/Bioconductor framework for microbiome data science. This data science framework consists of the following elements: data container for multi-omic data tables data analysis methods; a package ecosystem data sets for demonstration open online documentation The material follows open online book created by the course teachers, Orchestrating Microbiome Analysis (https://microbiome.github.io/OMA). You can run the workflows by simply copy-pasting the examples. For further, advanced material, you can test and modify further examples from the online book, or apply these techniques to your own data. 2.2 Day 1 - Open data science Morning session 9-10 Coffee, Welcome &amp; Practicalities 10-11 Lecture: Reproducible reporting and open science (Leo Lahti) 11-12 Demo: Data science framework (Tuomas Borman) 12-13 Lunch break Afternoon hands-on session (Leo Lahti, Tuomas Borman, Jenni Hekkala) 13-15 Introduction to R/Bioconductor &amp; teaching environment 15-17 Importing data to R for interactive data analysis; basic data analysis and visualization examples Task: selecting data; initializing a reproducible report in RStudio 2.3 Day 2 - Univariate methods Morning session 9-11 Key concepts and challenges in univariate analysis (Leo) Differential abundance &amp; multiple testing Alpha diversity estimation Time series Statistical considerations 11-12 Demo: Data exploration (Tuomas) Diagnostic summaries (library sizes; singletons; etc) Outlier &amp; anomaly detection Visualization Afternoon hands-on session 13-15 Differential abundance &amp; multiple testing 15-17 Alpha diversity analysis &amp; visualization Task: extending the reproducible report 2.4 Day 3 - Multivariate methods Morning session 9-11 Key concepts and challenges in multivariate analysis (Leo) Transformations, dissimilarities Beta diversity &amp; community similarity Supervised vs. unsupervised ordination Clustering &amp; visualization 11-12 Demo: Community similarity (Tuomas) Afternoon hands-on session 13-15 Estimating community similarity 15-17 Clustering and visualization Task: extending the reproducible report 2.5 Day 4 - Multi-table methods Morning session 9-11 Multi-table data integration (Leo) 11-12 Demo: cross-correlation, biclustering &amp; heatmaps (Tuomas) Afternoon hands-on session 13-15 Multi-omic data integration 15-16 Short presentations based on the reproducible reports 16-17 Summary, Conclusions &amp; Feedback "],["start.html", "3 Getting started 3.1 Checklist (before the course) 3.2 Support and resources 3.3 Installing and loading the required R packages", " 3 Getting started 3.1 Checklist (before the course) Install the following software in advance in order to avoid unnecessary delays and leaving more time for the course contents. R (version &gt;4.1.0) RStudio; choose “Rstudio Desktop” to download the latest version. Optional but preferred. For further details, check the Rstudio home page. Install and load the required R packages After a successful installation you can start with the case study examples in this training material 3.2 Support and resources For additional reading and online material, see Material section For online support on installation and other matters, you can join us at: Users: miaverse Gitter channel Developers: Bioconductor Slack #microbiomeexperiment channel (ask for an invitation) 3.3 Installing and loading the required R packages This section shows how to install and load all required packages into the R session. Only uninstalled packages are installed. # List of packages that we need from cran and bioc cran_pkg &lt;- c(&quot;BiocManager&quot;, &quot;bookdown&quot;, &quot;dplyr&quot;, &quot;ecodist&quot;, &quot;ggplot2&quot;, &quot;gridExtra&quot;, &quot;kableExtra&quot;, &quot;knitr&quot;, &quot;scales&quot;, &quot;vegan&quot;, &quot;matrixStats&quot;) bioc_pkg &lt;- c(&quot;yulab.utils&quot;,&quot;ggtree&quot;,&quot;ANCOMBC&quot;, &quot;ape&quot;, &quot;DESeq2&quot;, &quot;DirichletMultinomial&quot;, &quot;mia&quot;, &quot;miaViz&quot;) # Gets those packages that are already installed cran_pkg_already_installed &lt;- cran_pkg[ cran_pkg %in% installed.packages() ] bioc_pkg_already_installed &lt;- bioc_pkg[ bioc_pkg %in% installed.packages() ] # Gets those packages that need to be installed cran_pkg_to_be_installed &lt;- setdiff(cran_pkg, cran_pkg_already_installed) bioc_pkg_to_be_installed &lt;- setdiff(bioc_pkg, bioc_pkg_already_installed) # If there are packages that need to be installed, installs them from CRAN if( length(cran_pkg_to_be_installed) ) { install.packages(cran_pkg_to_be_installed) } # If there are packages that need to be installed, installs them from Bioconductor if( length(bioc_pkg_to_be_installed) ) { BiocManager::install(bioc_pkg_to_be_installed, ask = F) } Now all required packages are installed, so let’s load them into the session. Some function names occur in multiple packages. That is why miaverse’s packages mia and miaViz are prioritized. Packages that are loaded first have higher priority. # Reorders bioc packages, so that mia and miaViz are first bioc_pkg &lt;- c(bioc_pkg[ bioc_pkg %in% c(&quot;mia&quot;, &quot;miaViz&quot;) ], bioc_pkg[ !bioc_pkg %in% c(&quot;mia&quot;, &quot;miaViz&quot;) ] ) # Loading all packages into session. Returns true if package was successfully loaded. loaded &lt;- sapply(c(bioc_pkg, cran_pkg), require, character.only = TRUE) as.data.frame(loaded) ## loaded ## mia TRUE ## miaViz TRUE ## yulab.utils TRUE ## ggtree TRUE ## ANCOMBC TRUE ## ape TRUE ## DESeq2 TRUE ## DirichletMultinomial TRUE ## BiocManager TRUE ## bookdown TRUE ## dplyr TRUE ## ecodist TRUE ## ggplot2 TRUE ## gridExtra TRUE ## kableExtra TRUE ## knitr TRUE ## scales TRUE ## vegan TRUE ## matrixStats TRUE "],["reproducible-reporting-with-rmarkdown.html", "4 Reproducible reporting with Rmarkdown", " 4 Reproducible reporting with Rmarkdown Reproducible reporting is the starting point for robust interactive data science. Perform the following tasks: Create a Rmarkdown template in RStudio, and render it into a document (markdown, PDF, docx or other format) If you are entirely new to Markdown, take this 10 minute tutorial to get introduced to the most important functions within Markdown. Then experiment with different options with Rmarkdown In case you are new to Rmarkdown Rstudio provides resources to learn about the use cases and the basics of Rmarkdown. A good online tutorial to reproducible reporting is available by Dr. C Titus Brown. "],["importing-microbiome-data.html", "5 Importing microbiome data 5.1 Data access 5.2 Importing microbiome data in R 5.3 Example solutions", " 5 Importing microbiome data This section demonstrates how to import microbiome profiling data in R. 5.1 Data access Option 1 ADHD-associated changes in gut microbiota and brain in a mouse model Tengeler AC et al. (2020) Gut microbiota from persons with attention-deficit/hyperactivity disorder affects the brain in mice. Microbiome 8:44. In this study, mice are colonized with microbiota from participants with ADHD (attention deficit hyperactivity disorder) and healthy participants. The aim of the study was to assess whether the mice display ADHD behaviors after being inoculated with ADHD microbiota, suggesting a role of the microbiome in ADHD pathology. Download the data from data subfolder. Option 2 Western diet intervention study in serotonin transporter modified mouse model Mice received three weeks of Western (high fat, high sugar) or Control diet in three Genotype groups, a wild-type group and 2 groups with either partial or complete knock-out of the serotonin transporter (SERT), leading to an excess of serotonin in the gut, brain and blood circulation. Mice were measured before and after the intervention. In total there are three factors in this design, Time (pre-,post-intervention), Diet (Control, Western diet) and Genotype group (WT, HET, KO). There are about 6-8 mice per group. Data can be found from Summer School’s Brightspace. Option 3 Open data set of your own choice, see e.g.: Bioconductor microbiomeDataSets 5.2 Importing microbiome data in R Import example data by modifying the examples in the online book section on data exploration and manipulation. The data files in our example are in biom format, which is a standard file format for microbiome data. Other file formats exist as well, and import details vary by platform. Here, we import biom data files into a specific data container (structure) in R, TreeSummarizedExperiment (TSE) Huang et al. (2020). This provides the basis for downstream data analysis in the miaverse data science framework. In this course, we focus on downstream analysis of taxonomic profiling data, and assume that the data has already been appropriately preprocessed and available in the TSE format. In addition to our example data, further demonstration data sets are readily available in the TSE format through microbiomeDataSets. Figure sources: Original article - Huang R et al. (2021) TreeSummarizedExperiment: a S4 class for data with hierarchical structure. F1000Research 9:1246. Reference Sequence slot extension - Lahti L et al. (2020) Upgrading the R/Bioconductor ecosystem for microbiome research F1000Research 9:1464 (slides). 5.3 Example solutions Example code for data import: import.Rmd ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ## ## Attaching package: &#39;MatrixGenerics&#39; ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ## colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ## colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ## colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ## colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ## colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ## colWeightedMeans, colWeightedMedians, colWeightedSds, ## colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ## rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ## rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ## rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ## rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ## rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ## rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ## rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ## ## Attaching package: &#39;S4Vectors&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;Biobase&#39; ## The following object is masked from &#39;package:MatrixGenerics&#39;: ## ## rowMedians ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## anyMissing, rowMedians ## Loading required package: SingleCellExperiment ## Loading required package: TreeSummarizedExperiment ## Loading required package: Biostrings ## Loading required package: XVector ## ## Attaching package: &#39;Biostrings&#39; ## The following object is masked from &#39;package:base&#39;: ## ## strsplit ## Loading required package: MultiAssayExperiment ## Loading required package: ggplot2 ## Loading required package: ggraph ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:Biostrings&#39;: ## ## collapse, intersect, setdiff, setequal, union ## The following object is masked from &#39;package:XVector&#39;: ## ## slice ## The following object is masked from &#39;package:Biobase&#39;: ## ## combine ## The following objects are masked from &#39;package:GenomicRanges&#39;: ## ## intersect, setdiff, union ## The following object is masked from &#39;package:GenomeInfoDb&#39;: ## ## intersect ## The following objects are masked from &#39;package:IRanges&#39;: ## ## collapse, desc, intersect, setdiff, slice, union ## The following objects are masked from &#39;package:S4Vectors&#39;: ## ## first, intersect, rename, setdiff, setequal, union ## The following objects are masked from &#39;package:BiocGenerics&#39;: ## ## combine, intersect, setdiff, union ## The following object is masked from &#39;package:matrixStats&#39;: ## ## count ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union "],["microbiome-data-exploration.html", "6 Microbiome data exploration 6.1 Data structure 6.2 Visualization 6.3 Exercises (optional)", " 6 Microbiome data exploration Now we have loaded the data set into R. Next, let us walk through some basic operations for data exploration to confirm that the data has all the necessary components. 6.1 Data structure Let us now investigate how taxonomic profiling data is organized in R. Dimensionality tells us how many taxa and samples the data contains. As we can see, there are 151 taxa and 27 samples. dim(tse) ## [1] 151 27 The rowData slot contains a taxonomic table. This includes taxonomic information for each of the 151 entries. With the head() command, we can print just the beginning of the table. The rowData seems to contain information from 6 different taxonomy classes. knitr::kable(head(rowData(tse))) %&gt;% kableExtra::kable_styling(&quot;striped&quot;, latex_options=&quot;scale_down&quot;) %&gt;% kableExtra::scroll_box(width = &quot;100%&quot;) Kingdom Phylum Class Order Family Genus 1726470 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 1726471 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 17264731 Bacteria Bacteroidetes Bacteroidia Bacteroidales Porphyromonadaceae Parabacteroides 17264726 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 1726472 Bacteria Verrucomicrobia Verrucomicrobiae Verrucomicrobiales Verrucomicrobiaceae Akkermansia 17264724 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides The colData slot contains sample metadata. It contains information for all 27 samples. However, here only the 6 first samples are shown as we use the head() command. There are 4 columns, that contain information, e.g., about patients’ status, and cohort. knitr::kable(head(colData(tse))) %&gt;% kableExtra::kable_styling(&quot;striped&quot;, latex_options=&quot;scale_down&quot;) %&gt;% kableExtra::scroll_box(width = &quot;100%&quot;) patient_status cohort patient_status_vs_cohort sample_name A110 ADHD Cohort_1 ADHD_Cohort_1 A110 A12 ADHD Cohort_1 ADHD_Cohort_1 A12 A15 ADHD Cohort_1 ADHD_Cohort_1 A15 A19 ADHD Cohort_1 ADHD_Cohort_1 A19 A21 ADHD Cohort_2 ADHD_Cohort_2 A21 A23 ADHD Cohort_2 ADHD_Cohort_2 A23 From here, we can draw summaries of the sample (column) data, for instance to see what is the patient status distribution. The command colData(tse)$patient_status fetches the data from the column, and table() creates a table that shows how many times each class is present, and sort() sorts the table to ascending order. There are 13 samples from patients having ADHD, and 14 control samples. sort(table(colData(tse)$patient_status)) ## ## ADHD Control ## 13 14 6.1.1 Transformations Microbial abundances are typically ‘compositional’ (relative) in the current microbiome profiling data sets. This is due to technical aspects of the data generation process (see e.g. Gloor et al., 2017). The next example calculates relative abundances as these are usually easier to interpret than plain counts. For some statistical models we need to transform the data into other formats as explained in above link (and as we will see later). # Calculates relative abundances, and stores the table to assays tse &lt;- transformCounts(tse, method = &quot;relabundance&quot;) A variety of standard transformations for microbiome data are available for TSE data objects through mia R package. 6.1.2 Aggregation Microbial species can be called at multiple taxonomic resolutions. We can easily agglomerate the data based on taxonomic ranks. Here, we agglomerate the data at Phylum level. tse_phylum &lt;- agglomerateByRank(tse, rank = &quot;Phylum&quot;) # Show dimensionality dim(tse_phylum) ## [1] 5 27 Now there are 5 taxa and 27 samples, meaning that there are 5 different Phylum level taxonomic groups. Looking at the rowData after agglomeration shows all Firmicutes are combined together, and all lower rank information is lost. From the assay we can see that all abundances of taxa that belong to Firmicutes are summed up. knitr::kable(head(rowData(tse_phylum))) %&gt;% kableExtra::kable_styling(&quot;striped&quot;, latex_options=&quot;scale_down&quot;) %&gt;% kableExtra::scroll_box(width = &quot;100%&quot;) Kingdom Phylum Class Order Family Genus Bacteroidetes Bacteria Bacteroidetes NA NA NA NA Verrucomicrobia Bacteria Verrucomicrobia NA NA NA NA Proteobacteria Bacteria Proteobacteria NA NA NA NA Firmicutes Bacteria Firmicutes NA NA NA NA Cyanobacteria Bacteria Cyanobacteria NA NA NA NA If you are sharp, you have by now noticed that all the aggregated values in the above example are NA’s (missing data). This is because the agglomeration is missing abundances for certain taxa, and in that case the sum is not defined by default (na.rm = FALSE). We can ignore the missing values in summing up the data by setting na.rm = TRUE; then the taxa that do not have information in specified level will be removed. Those taxa that do not have information in specified level are agglomerated at lowest possible level that is left after agglomeration. temp &lt;- rowData(agglomerateByRank(tse, rank = &quot;Genus&quot;)) # Prints those taxa that do not have information at the Genus level knitr::kable(head(temp[temp$Genus == &quot;&quot;,])) %&gt;% kableExtra::kable_styling(&quot;striped&quot;, latex_options=&quot;scale_down&quot;) %&gt;% kableExtra::scroll_box(width = &quot;100%&quot;) Kingdom Phylum Class Order Family Genus Family:Lachnospiraceae Bacteria Firmicutes Clostridia Clostridiales Lachnospiraceae Order:Bacteroidales Bacteria Bacteroidetes Bacteroidia Bacteroidales Order:Clostridiales Bacteria Firmicutes Clostridia Clostridiales Family:Enterobacteriaceae Bacteria Proteobacteria Gammaproteobacteria Enterobacteriales Enterobacteriaceae Order:Gastranaerophilales Bacteria Cyanobacteria Melainabacteria Gastranaerophilales Here agglomeration is done similarly, but na.rm = TRUE temp2 &lt;- rowData(agglomerateByRank(tse, rank = &quot;Genus&quot;, na.rm = TRUE)) print(paste0(&quot;Agglomeration with na.rm = FALSE: &quot;, dim(temp)[1], &quot; taxa.&quot;)) ## [1] &quot;Agglomeration with na.rm = FALSE: 54 taxa.&quot; print(paste0(&quot;Agglomeration with na.rm = TRUE: &quot;, dim(temp2)[1], &quot; taxa.&quot;)) ## [1] &quot;Agglomeration with na.rm = TRUE: 49 taxa.&quot; The mia package contains further examples on various data agglomeration and splitting options. 6.2 Visualization The miaViz package facilitates data visualization. Let us plot the Phylum level abundances. # Here we specify &quot;relabundance&quot; to be abundance table that we use for plotting. # Note that we can use agglomerated or non-agglomerated tse as an input, because # the function agglomeration is built-in option. # Legend does not fit into picture, so its height is reduced. plot_abundance &lt;- plotAbundance(tse, abund_values=&quot;relabundance&quot;, rank = &quot;Phylum&quot;) + theme(legend.key.height = unit(0.5, &quot;cm&quot;)) + scale_y_continuous(label = scales::percent) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. plot_abundance ## Warning in grid.Call.graphics(C_rect, x$x, x$y, x$width, x$height, ## resolveHJust(x$just, : semi-transparency is not supported on this device: ## reported only once per page Density plot shows the overall abundance distribution for a given taxonomic group. Let us check the relative abundance of Firmicutes across the sample collection. The density plot is a smoothened version of a standard histogram. The plot shows peak abundances around 30 %. # Subset data by taking only Firmicutes tse_firmicutes &lt;- tse_phylum[&quot;Firmicutes&quot;] # Gets the abundance table abundance_firmicutes &lt;- assay(tse_firmicutes, &quot;relabundance&quot;) # Creates a data frame object, where first column includes abundances firmicutes_abund_df &lt;- as.data.frame(t(abundance_firmicutes)) # Rename the first and only column colnames(firmicutes_abund_df) &lt;- &quot;abund&quot; # Creates a plot. Parameters inside feom_density are optional. With # geom_density(bw=1000), it is possible to adjust bandwidth. firmicutes_abund_plot &lt;- ggplot(firmicutes_abund_df, aes(x = abund)) + geom_density(color=&quot;darkred&quot;, fill=&quot;lightblue&quot;) + labs(x = &quot;Relative abundance&quot;, title = &quot;Firmicutes&quot;) + theme_classic() + # Changes the background scale_x_continuous(label = scales::percent) firmicutes_abund_plot For more visualization options and examples, see the miaViz vignette. 6.3 Exercises (optional) Explore some of the following questions on your own by following online examples. Prepare a reproducible report (Rmarkdown), and include the code that you use to import the data and generate the analyses. Abundance table Retrieve the taxonomic abundance table from the example data set (TSE object). Tip: check “assays” in data import section How many different samples and genus-level groups this phyloseq object has? Tips: see dim(), rowData() What is the maximum abundance of Akkermansia in this data set? Tip: aggregate the data to Genus level with agglomerateByRank, pick abundance assay, and check a given genus (row) in the assay Draw a histogram of library sizes (total number of reads per sample). Tip: Library size section in OMA. You can use the available function, or count the sum of reads per sample by using the colSums command applied on the abundance table. Check Vandeputte et al. 2017 for further discussion on the differences between absolute and relative quantification of microbial abundances. Taxonomy table Retrieve the taxonomy table and print out the first few lines of it with the R command head(). Investigate how many different phylum-level groups this phyloseq object has? Tips: rowData, taxonomicRanks in OMA. Sample metadata Retrieve sample metadata. How many patient groups this data set has? Draw a histogram of sample diversities. Tips: colData Subsetting Pick a subset of the data object including only ADHD individuals from Cohort 1. How many there are? Tips: subsetting in OMA Transformations The data contains read counts. We can convert these into relative abundances and other formats. Compare abundance of a given taxonomic group using the example data before and after the compositionality transformation (with a cross-plot, for instance). You can also compare the results to CLR-transformed data (see e.g. Gloor et al. 2017) Visual exploration Visualize the population distribution of abundances for certain taxonomic groups. Do the same for CLR-transformed abundances. Tip: assays, transformCounts Experiment with other data manipulation tools from OMA. Example solution: Solutions "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
